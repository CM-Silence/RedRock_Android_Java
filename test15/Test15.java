package RedRock_Android_Java.test15;
import java.util.Scanner;
import static RedRock_Android_Java.test15.Calculator.*;

//work4 level3
//简易计算器(简易个鬼,头都秃了)
public class Test15 {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
        System.out.println("请输入一个数学表达式\n按照平时的写法即可,字符之间空不空格都无所谓,注意除号是/,幂次是^\n支持小括号和中括号,暂时不支持大括号以及三角函数等\n程序有一定的容错率,输入中文符号或者将乘号输成*、x或X也可以执行\n例子:[-6*(5+4)/2]^3");
        String input = judge(); //用下面定义的judge方法给input赋值
        calculate(input);
    }

    //用于判断用户输入的算式是否合理的方法
    public static String judge(){
        do {
            String formula = sc.nextLine(); //接收用户的输入
            //将用户有可能输错的字符转换为正确的字符，提高容错率
            formula = formula.replaceAll("\s","");
            formula = formula.replaceAll("x","*");
            formula = formula.replaceAll("X","*");
            formula = formula.replaceAll("（","(");
            formula = formula.replaceAll("）",")");
            formula = formula.replaceAll("【","[");
            formula = formula.replaceAll("】","]");

            //下面这个正则可读性有点差,建议看最下面的注释(看了也不一定看得懂awa)
            if (!formula.matches("(((-)?\\[(((-)?(\\d)+(\\.(\\d)+)?)|((-)?\\((-)?(\\d)+(\\.(\\d)+)?([+\\-*/^](-)?(\\d)+(\\.(\\d)+)?)+\\)))([+\\-*/^](((-)?(\\d)+(\\.(\\d)+)?)|((-)?\\((-)?(\\d)+(\\.(\\d)+)?([+\\-*/^](-)?(\\d)+(\\.(\\d)+)?)+\\))))+])|(((-)?(\\d)+(\\.(\\d)+)?)|((-)?\\((-)?(\\d)+(\\.(\\d)+)?([+\\-*/^](-)?(\\d)+(\\.(\\d)+)?)+\\)))|((-)?(\\d)+(\\.(\\d)+)?))([+\\-*/^](((-)?\\[(((-)?(\\d)+(\\.(\\d)+)?)|((-)?\\((-)?(\\d)+(\\.(\\d)+)?([+\\-*/^](-)?(\\d)+(\\.(\\d)+)?)+\\)))([+\\-*/^](((-)?(\\d)+(\\.(\\d)+)?)|((-)?\\((-)?(\\d)+(\\.(\\d)+)?([+\\-*/^](-)?(\\d)+(\\.(\\d)+)?)+\\))))+])|(((-)?(\\d)+(\\.(\\d)+)?)|((-)?\\((-)?(\\d)+(\\.(\\d)+)?([+\\-*/^](-)?(\\d)+(\\.(\\d)+)?)+\\)))|((-)?(\\d)+(\\.(\\d)+)?)))+")) {
                //我本不想报错,用户可不希望看到一堆红字报出来awa
                //System.out.println("输入的算式格式有误,请再次输入!\n例子:[-6*(5+4)/2]^3");
                try {
                    throw new FormulaErrorException("输入的算式格式有误,请再次输入!\n例子:[-6*(5+4)/2]^3");
                }catch (FormulaErrorException e){
                    e.printStackTrace();
                }
            }
            else{
                return formula; //符合算式要求则返回修改后的算式(修改了用户的一些不标准输入)
            }
        }while (true); //用户不输对就让他一直输,输到我满意为止awa(恐怖)
    }
    //非常"简单"的正则表达式
    //一个数字(可能是小数/负数):((-)?(\d)+(\.(\d)+)?)

    //运算符号:[+\-*/^]

    //运算符号跟一个数字组合多次:([+\-*/^](-)?(\d)+(\.(\d)+)?)+

    //纯数字算式:(-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+

    //一个小括号内的算式:(-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)

    //运算符号跟小括号组合多次:([+\-*/^](-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\))+

    //一个小括号或一个数字:(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))

    //运算符跟小括号或数字组合多次:([+\-*/^](((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\))))+

    //带有小括号和数字的算式(要写两行了,开头的//去掉就可以了):(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))
    //([+\-*/^](((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\))))+

    //一个中括号内的算式:(-)?\[(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))
    // ([+\-*/^](((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\))))+]

    //一个中括号或一个小括号或一个数字:(((-)?\[(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))
    // ([+\-*/^](((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\))))+])|
    // (((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))|((-)?(\d)+(\.(\d)+)?))

    //运算符跟中括号或小括号或数字组合多次:([+\-*/^](((-)?\[(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))
    //([+\-*/^](((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\))))+])|
    //(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))|((-)?(\d)+(\.(\d)+)?)))+

    //带有中括号、小括号和数字的算式(这就是上面那条正则表达式的内容啦):(((-)?\[(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))
    //([+\-*/^](((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\))))+])|
    //(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))|((-)?(\d)+(\.(\d)+)?))
    //([+\-*/^](((-)?\[(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))
    //([+\-*/^](((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\))))+])|
    //(((-)?(\d)+(\.(\d)+)?)|((-)?\((-)?(\d)+(\.(\d)+)?([+\-*/^](-)?(\d)+(\.(\d)+)?)+\)))|((-)?(\d)+(\.(\d)+)?)))+

}
